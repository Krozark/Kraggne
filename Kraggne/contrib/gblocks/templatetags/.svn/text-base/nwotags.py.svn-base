import re, os, locale, HTMLParser
from decimal import *

from django import template
from django.conf import settings
from django.core.urlresolvers import RegexURLResolver, reverse
from django.utils.safestring import SafeString
from django.utils.translation import gettext as _
from django.utils.importlib import import_module

from contrib.core.utils import money_format

register = template.Library()

"""
Installing new locales:
$: grep -ri 'fr_ca' /usr/share/i18n/SUPPORTED
$: locale-gen fr_CA.UTF-8
$: locale-gen fr_CA

View Installed locales:
$: locale -a
"""

locale.setlocale(locale.LC_ALL, getattr(settings, 'LOCALE_FORMATTING', 'fr_CA'))

@register.filter()
def get_file_extension(f):
    """Returns the display value of a BoundField"""
    basename, ext = os.path.splitext(str(f))
    return ext.replace('.', '').lower()


@register.filter()
def formatChoice(bf):
    """Returns the display value of a BoundField"""
    return dict(bf.field.choices).get(bf.data, '')

@register.simple_tag
def navlink(context, text, link, pattern=False, title=False, className=False):
    active = False
    if not pattern and context['request'].path.startswith(link):
        active = True
    elif pattern and re.match(pattern, context['request'].path):
        active = True
    return {
        'url':    link,
        'text':   text,
        'title':  title,
        'class':  className,
        'active': active,
    }
register.inclusion_tag('navlink.inc.html', takes_context=True)(navlink)


@register.simple_tag
def reversenavlink(context, text, view, pattern=False, title=False, className=''):
    return {
        'url':    reverse(view),
        'text':   text,
        'title':  title,
        'class':  className,
        'active': active(context['request'].path, view, pattern)
    }
register.inclusion_tag('navlink.inc.html', takes_context=True)(reversenavlink)

@register.simple_tag
def active(url, view=None, pattern=None):
    if not view and not pattern:
        return False

    if pattern:
        if re.search(pattern, url):
            return True
        else:
            return False

    if view:
        return url == reverse(view)


@register.simple_tag
def nav(request, nav_list=False):
    if nav_list == False:
        nav_list = settings.NAV
        out = ['<div class="nv">']
    else:
        out = ['<div class="sub-nv">']

    total = len(nav_list)
    x = 0

    for nv in nav_list:
        actv    = ''
        pattern = None
        view    = None
        classes = []
        if 'kwargs' in nv:
            url = reverse(nv['url'], kwargs=nv['kwargs'])
        elif 'args' in nv:
            url = reverse(nv['url'], args=nv['args'])
        else:
            url = reverse(nv['url'])

        if type(nv['label']) is dict and request.LANGUAGE_CODE:
            label = nv['label'][request.LANGUAGE_CODE[:2]]
        else:
            label = nv['label']
        # Can override active with 'active': True|False
        if 'active' in nv:
            if nv['active']:
                actv = 'active'
                classes.append('active')
        # Else find out if active
        else:
            # Using a regex pattern
            if 'pattern' in nv:
                pattern = nv['pattern']
            # Or else using the view name
            if 'view' in nv:
                view = nv['view']

            if active(request.path, view, pattern):
                actv = 'active'
                classes.append('active')
        
        if 'class' in nv:
            classes.append(nv['class'])
        
        if 'id' in nv:
            nv_id = ' id="%s"' % nv['id']
        else:
            nv_id = ''

        if x == 0:
            li = '<div%s class="nv-item first %s">' % (nv_id, actv)
        elif x+1 == total:
            li = '<div%s class="nv-item last %s">' % (nv_id, actv)
        else:
            li = '<div%s class="nv-item %s">' % (nv_id, actv)

        c = 'class="%s"' % " ".join(classes)
        
        # building sub nav
        if 'subnav' in nv:
            if type(nv['subnav']) is list:
                subnv = nv['subnav']
            elif callable(nv['subnav']):
                subnv = nv['subnav'](request)
            else:
                parts = nv['subnav'].split('.')
                module_name = '.'.join(parts[:-1])
                module = import_module(module_name)
                subnv = getattr(module, parts[-1])(request)

            subnav = nav(request, subnv)
        else:
            subnav = ''

        if 'get' in nv:
            url = '%s%s' % (url, nv['get'])

        out.append('%s<a href="%s" %s title="%s">%s</a>%s</div>' % (li, url, c, label, label, subnav))

        x += 1

    out.append('</div>')
    return ''.join(out)


@register.simple_tag
def listitemclass(a, b, forloop):
    classes = []
    if a == b:
        classes.append('active')
    if forloop['first']:
        classes.append('first')
    if forloop['last']:
        classes.append('last')
    return " ".join(classes)


@register.simple_tag
def edit_toolbar(user, url_name, obj_id, deletable=False):
    if user.is_authenticated and user.is_staff:
        if '_change' in url_name:
           #print "Deprecation Warning: Use app_model instead of app_model_change as URL argument for the edit_toolbar templatetag"
            url_name = url_name.replace('_change', '')
        if deletable:
            delete_button = '<a href="%s" title="%s" class="edit-delete" target="_blank">%s</a>\n' % (
                    reverse('%s_delete' % url_name, args=[obj_id]), _('Delete'), _('delete'))
        else:
            delete_button = ''
        return """<div class="edit-toolbar">
    <a href="%s" class="edit-block" title="%s">%s</a>
    <a href="%s" title="%s" target="_blank">%s</a>%s
</div>""" % (
    reverse('%s_change' % url_name, args=[obj_id]),
    _("Edit this content"),
    _('edit'),
    reverse('%s_change' % url_name, args=[obj_id]),
    _("Edit this content in the admin panel"),
    _('admin'),
    delete_button,
)
    else:
        return ""


@register.simple_tag
def add_toolbar(user, url_name):
    if user.is_authenticated and user.is_staff:
        return """<div class="add-toolbar"><a href="%s" class="edit-add" title="%s">%s</a></div>""" % (
            reverse('%s_add' % url_name),
            _("Add another"),
            _('add'),
        )
    else:
        return ""

# DEPRECATED
@register.simple_tag
def edit_button(user, url_name, obj_id):
   #print "core.templatetags.edit_button tag is deprecated, use core.templatetags.edit_toolbar instead"
    return edit_toolbar(user, url_name, obj_id)


@register.filter()
def htmlunentities(s):
    h = HTMLParser.HTMLParser()
    return h.unescape(s)


@register.filter()
def currency(value):
    try:
        return locale.currency(float(value), grouping=True)
    except:
        return ''

@register.simple_tag()
def frmt_currency(value, places=2, sep=' ', dp='.', pos='', neg='', trailneg='', curr='$'):
    val = Decimal(str(value))
    rs = money_format(val, places=places, curr='', sep=sep, dp=dp, pos=pos, neg=neg, trailneg=trailneg)
    return '%s$' % rs


def youtubevid(url, size="480x390", frameborder=0, allowfullscreen=True):
    if 'embed' not in url:
        url = url.replace('watch?v=', 'embed/').split('&')[0]
    return {
        'url': url,
        'width': size.split('x')[0],
        'height': size.split('x')[1],
        'frameborder': frameborder,
        'allowfullscreen': ' allowfullscreen',
    }
register.inclusion_tag('youtubevid.inc.html')(youtubevid)



